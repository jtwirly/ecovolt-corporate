enum UserStatus {
    INVITED
    VERIFIED
}

model User {
    id                String             @id @default(uuid())
    name              String?
    email             String?            @unique
    pictureUrl        String?            @default('https://i.imgur.com/ZdJSK3Y.jpeg')
    tokenInvitation   String?

    stripeCustomerId  String?

    status            UserStatus         @default(VERIFIED)

    // this is the role of the user for the application
    globalRole        String             @default('USER')
    password          String?            @password @omit
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt @default(now())

    organizationRoles OrganizationRole[]

    alerts            Alert[]            @relation("user")
    reports           Report[]           @relation("user")

    @@auth()
    @@allow("all", auth().id == this.id)
    @@allow('all', auth().globalRole == 'ADMIN')

    //we only allow that user to register if they don't create an admin role
    @@allow("create", globalRole != 'ADMIN')
    @@allow("read", true)
}

model Facility {

    id                 String              @id @default(uuid())
    name               String
    address            String?

    organizationId     String
    organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")

    energyConsumptions EnergyConsumption[] @relation("facility")
    energyCosts        EnergyCost[]        @relation("facility")
    alerts             Alert[]             @relation("facility")
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt @default(now())
    @@allow("all", true)
}

model EnergyConsumption {

    id         String    @id @default(uuid())
    date       String
    amount     Float
    unit       String

    facilityId String
    facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model EnergyCost {

    id         String    @id @default(uuid())
    date       String
    amount     Float
    currency   String

    facilityId String
    facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model SustainabilityGoal {

    id             String        @id @default(uuid())
    targetDate     String
    description    String?
    targetValue    Float
    unit           String

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model EnergyProcurement {

    id             String        @id @default(uuid())
    sourceType     String
    amount         Float
    unit           String
    date           String
    contractUrl    String?

    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Alert {

    id         String    @id @default(uuid())
    type       String
    message    String

    userId     String
    user       User?     @relation(fields: [userId], references: [id], name: "user")
    facilityId String
    facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt @default(now())
    @@allow("all", true)
}

model Report {

    id             String        @id @default(uuid())
    type           String
    generatedAt    String
    reportUrl      String?

    userId         String
    user           User?         @relation(fields: [userId], references: [id], name: "user")
    organizationId String
    organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")

    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt @default(now())
    @@allow("all", true)
}

model Organization {
    id                  String               @id @default(uuid())
    name                String
    pictureUrl          String?              @default('https://i.imgur.com/BgkFiid.jpeg')

    stripeCustomerId    String?

    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt @default(now())
    roles               OrganizationRole[]

    facilitys           Facility[]           @relation("organization")
    sustainabilityGoals SustainabilityGoal[] @relation("organization")
    energyProcurements  EnergyProcurement[]  @relation("organization")
    reports             Report[]             @relation("organization")

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', roles?[user == auth() && name == 'owner'])
    @@allow('read', roles?[user == auth()])
}

model OrganizationRole {
    id             String       @id @default(uuid())
    name           String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt @default(now())

    userId         String       @default(auth().id)
    user           User         @relation(fields: [userId], references: [id])
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

    @@allow('all', auth().globalRole == 'ADMIN')
    @@allow('all', organization.roles?[user == auth() && name == 'owner'])
    @@allow('create', organization.roles?[user == auth()] && name != 'owner')
    @@allow('read', organization.roles?[user == auth()])
    @@allow('delete', auth() == user)
}

