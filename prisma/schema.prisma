//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  alerts            Alert[]            @relation("user")
  reports           Report[]           @relation("user")
}

/// @@allow('all', true)
model Facility {
  id                 String              @id() @default(uuid())
  name               String
  address            String?
  organizationId     String
  organization       Organization?       @relation(fields: [organizationId], references: [id], name: "organization")
  energyConsumptions EnergyConsumption[] @relation("facility")
  energyCosts        EnergyCost[]        @relation("facility")
  alerts             Alert[]             @relation("facility")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EnergyConsumption {
  id         String    @id() @default(uuid())
  date       String
  amount     Float
  unit       String
  facilityId String
  facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EnergyCost {
  id         String    @id() @default(uuid())
  date       String
  amount     Float
  currency   String
  facilityId String
  facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SustainabilityGoal {
  id             String        @id() @default(uuid())
  targetDate     String
  description    String?
  targetValue    Float
  unit           String
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EnergyProcurement {
  id             String        @id() @default(uuid())
  sourceType     String
  amount         Float
  unit           String
  date           String
  contractUrl    String?
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Alert {
  id         String    @id() @default(uuid())
  type       String
  message    String
  userId     String
  user       User?     @relation(fields: [userId], references: [id], name: "user")
  facilityId String
  facility   Facility? @relation(fields: [facilityId], references: [id], name: "facility")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Report {
  id             String        @id() @default(uuid())
  type           String
  generatedAt    String
  reportUrl      String?
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id                  String               @id() @default(uuid())
  name                String
  pictureUrl          String?              @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId    String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt()
  roles               OrganizationRole[]
  facilitys           Facility[]           @relation("organization")
  sustainabilityGoals SustainabilityGoal[] @relation("organization")
  energyProcurements  EnergyProcurement[]  @relation("organization")
  reports             Report[]             @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
